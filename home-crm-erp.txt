Задание: Выбрать архитектуру домашнего CRM или ERP приложения. Обосновать выбранное решение.

Ответ: для начала нужно разобраться с терминами.  ERP - Enterprise resource planning, сложная и громоздкая система по обеспечению коммуникации и взаимодействия между различными отделами и ветвями компании. Так как мы рассматриваем «малые» и «домашние» бизнесы, то приходим к выводу, что отдельная система ERP не нужна, она понесет за собой лишь финансовые и временные затраты на разработку, внедрение и сопровождение.
CRM - Customer relationship management, это система по упорядочиванию, обработке и аналитике входящих заявок от клиентов. Такой продукт поможет вести учет всех данных клиентов, их активности на нашем сайте и облегчить работу отдела продаж. 
В рамках самописного решения нам, по сути, остается выбрать только способ развертывания:
- десктопный, с установкой приложения на сервер компании и подключению к нему с помощью приложений-клиентов. 
- серверный с web-интерфейсом, с установкой на сервер копании и доступом через браузер. 
В текущих условиях, при наличии большого числа удаленно работающих сотрудников, мне кажется оптимальным вариант с web-доступом до сервера компании, чтобы все сотрудники имели беспроблемный доступ с любого устройства с браузером. Таким образом, необходимо запрограммировать следующие элементы:
1. «бэкенд».
1.1. базу данных для хранения клиентских и прочих служебных данных:
1.2. слой бизнес-логики, обеспечивающий обработку входящих запросов и выдачу информации из базы данных.
2. «фронтенд».
2.1. веб-страница для отображения всей необходимой информации и взаимодействия с пользователями.
Мы получаем общую структуру вида «клиент-сервер» (клиент-браузер запрашивает информацию у сервера») с общением, например, по REST (на примере изучаемого нами Java). Внутри сервера возможны два основных варианта: система микросервисов или MVC-решение (например, Spring MVC). Микросервисное решение заточено, как мне кажется, «на развитие» компании, поскольку поддерживает достаточно простое масштабирование при необходимости увеличения производительности системы или отдельных ее компонентов. Также, суть микросервисов в том, что каждый компонент может (и, наверное, должен) быть написан на своем, более подходящем для решении конкретной задачи языке или фреймворке, что затруднит начальную разработку и потребует специалиста более высокой квалификации. Поэтому, если мы рассматриваем исключительно малый бизнес в конкретный момент времени, мой выбор для сервера это MVC-решение, как более простое и быстрое для старта разработки.